/// <reference types="react" />
import RN = require('react-native');
import Types = require('../common/Types');
import RX = require('../common/Interfaces');
export declare class AnimatedImage extends RX.AnimatedImage {
    private _mountedComponent;
    setNativeProps(props: Types.AnimatedImageProps): void;
    render(): JSX.Element;
    protected _onMount: (component: RN.ReactNativeBaseComponent<any, any> | null) => void;
}
export declare class AnimatedText extends RX.AnimatedText {
    private _mountedComponent;
    setNativeProps(props: Types.AnimatedTextProps): void;
    render(): JSX.Element;
    protected _onMount: (component: RN.ReactNativeBaseComponent<any, any> | null) => void;
}
export declare class AnimatedTextInput extends RX.AnimatedTextInput {
    private _mountedComponent;
    setNativeProps(props: Types.AnimatedTextInputProps): void;
    focus(): void;
    blur(): void;
    render(): JSX.Element;
    protected _onMount: (component: RN.ReactNativeBaseComponent<any, any> | null) => void;
}
export declare class AnimatedView extends RX.AnimatedView {
    protected _mountedComponent: RN.ReactNativeBaseComponent<any, any> | null;
    setNativeProps(props: Types.AnimatedViewProps): void;
    focus(): void;
    blur(): void;
    setFocusRestricted(restricted: boolean): void;
    setFocusLimited(limited: boolean): void;
    render(): JSX.Element;
    protected _onMount: (component: RN.ReactNativeBaseComponent<any, any> | null) => void;
}
export declare let Animated: {
    Image: typeof AnimatedImage;
    Text: typeof AnimatedText;
    TextInput: typeof AnimatedTextInput;
    View: typeof AnimatedView;
    Easing: Types.Animated.Easing;
    timing: (value: Types.AnimatedValue, config: Types.Animated.TimingAnimationConfig) => Types.Animated.CompositeAnimation;
    delay: (time: number) => RN.CompositeAnimation;
    parallel: (animations: RN.CompositeAnimation[]) => RN.CompositeAnimation;
    sequence: (animations: RN.CompositeAnimation[]) => RN.CompositeAnimation;
    Value: typeof RN.Animated.Value;
    createValue: (initialValue: number) => RN.Animated.Value;
    interpolate: (animatedValue: Types.AnimatedValue, inputRange: number[], outputRange: string[]) => Types.InterpolatedValue;
};
export default Animated;
